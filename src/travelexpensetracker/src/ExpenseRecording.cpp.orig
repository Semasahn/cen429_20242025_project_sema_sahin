#include "ExpenseRecording.h"
#include <iostream>

void ExpenseRecording::logExpense(const std::string& description, double amount) {
    expenses.push_back({ description, amount });
    std::cout << "Expense logged: " << description << " - " << amount << " USD" << std::endl;
}

void ExpenseRecording::viewExpenses() const {
    std::cout << "Current expenses: " << std::endl;
    for (size_t i = 0; i < expenses.size(); ++i) {
        std::cout << i + 1 << ". " << expenses[i].description << " - " << expenses[i].amount << " USD" << std::endl;
    }
}

void ExpenseRecording::editExpense(int expenseId, const std::string& newDescription, double newAmount) {
    if (expenseId > 0 && expenseId <= static_cast<int>(expenses.size())) {
        expenses[expenseId - 1] = { newDescription, newAmount };
        std::cout << "Expense updated: " << newDescription << " - " << newAmount << " USD" << std::endl;
    }
    else {
        std::cout << "Invalid expense ID." << std::endl;
    }
}

void ExpenseRecording::deleteExpense(int expenseId) {
    if (expenseId > 0 && expenseId <= static_cast<int>(expenses.size())) {
        expenses.erase(expenses.begin() + expenseId - 1);
        std::cout << "Expense deleted." << std::endl;
    }
    else {
        std::cout << "Invalid expense ID." << std::endl;
    }
}
